module PropertyTransport
{
    sequence<byte> ByteSequence;
    sequence<string> PropertyIdCollection;

    /** Enumeration used to give an indication of the result of a request. */
    enum ReturnCode
    {
        SUCCESS,
        PROPERTY_NOT_ADVERTISED,
        PROPERTY_ALREADY_ADVERTISED,
        NO_SUBSCRIPTION_FOUND,
        ADVERTISER_STILL_ALIVE,
        ADVERTISER_DEAD,
        SUBSCRIBER_DEAD,
        NOT_IMPLEMENTED
    };

    /** Enumeration describing the set of supported property types. */
    enum PropertyType
    {
        PROPERTY_UNKNOWN = -1,
        PROPERTY_BOOL = 0,
        PROPERTY_CHAR = 1,
        PROPERTY_DOUBLE = 2,
        PROPERTY_FLOAT = 3,
        PROPERTY_INT = 4,
        PROPERTY_STRING = 5,
        PROPERTY_CSTRING = 6
    };

    /**
     * Describes a property that has been serialised for transmission.
     * Can be re-assembled at the other end using the provided PropertyType.
     */
    struct SerialisedProperty
    {
        string propertyId;
        PropertyType type;
        ByteSequence data;
    };
    sequence<SerialisedProperty> UpdatedPropertyCollection;

    /** Describes the result of a request concerning a particular property. */
    struct RequestResult
    {
        string propertyId;
        ReturnCode result;
    };
    sequence<RequestResult> RequestResultCollection;

    /**
     * Implemented by advertisers wishing to advertise properties to subscribers.
     */
    interface PropertyAdvertiserTemplate
    {
        /**
         * Called by subscribers wishing to receive updates to a particular set of properties.
         * Returns a set of return codes for each property (hopefully SUCCESS).
         */
        RequestResultCollection subscriberRequestsSubscription(PropertyIdCollection propertyIds, string subscriberAddress);

        /**
         * Called by subscribers wishing to cancel their subscriptPROPERTY_TRANSPORT_LIBion to a particular set of properties.
         * Returns true if successful, false if the specified property is not being advertised.
         */
        RequestResultCollection subscriberRequestsUnsubscription(PropertyIdCollection propertyIds, string subscriberAddress);

        /**
         * Called by a subscriber who hasn't received a heartbeat or property update in a while and
         * is considering resubmitting all of its subscription requests.
         */
        ReturnCode subscriberRequestsAcknowledgement();
    };

    /**
     * Implemented by components wishing to receive property values from an advertiser.
     */
    interface PropertySubscriberTemplate
    {
        /**
         * An advertiser calls this method periodically to let the subscriber know it is still alive.
         */
        void advertiserSendsHeartbeat(string advertiserAddress);

        /**
         * An advertiser calls this method on a subscriber to notify them of multiple property updates.
         */
        void advertiserSendsUpdatedProperties(UpdatedPropertyCollection updatedProperties);

        /**
         * An advertiser calls this method on a subscriber to notify them of that the specified properties are no longer being advertised.
         * Enables the subscriber to react accordingly (display dashes instead of numbers, flash red, etc.)
         */
        void advertiserRevokesSubscriptions(string advertiserAddress, PropertyIdCollection propertyIds);

        /**
         * An advertiser calls this method on a subscriber to notify them that they are about to shut down. Enables a more graceful
         * disconnection than simply dropping out.
         */
        void advertiserShuttingDown(string advertiserAddress);
    };
};
